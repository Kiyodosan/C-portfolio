// Written in C (not C# nor C++)
// Random number generator (within a defined range) + sort function

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#define ARRAY_SIZE 20
#define UPPER_LIMIT 20
#define LOWER_LIMIT 12
#define DATA_UPPER_LIMIT 90
#define DATA_LOWER_LIMIT 10

int randomArrayAmt(void);
void randomNumGen(int a[], int n);
void intro(int a[], int n);
int * sizeUp(int n);
void printNum(const int a[], int n);
void stats(int a[], int n);
void ascSort(int a[], int n);
void showSort(int a[], int n);
int minArray(int a[], int n);
int maxArray(int a[], int n);
int aveArray(int a[], int n);
int  sumArray(int a[], int n);
int  medianArray(int a[], int n);

char stuName[12] = "Tyler Odo";
char projName[12] = "Project 3";

int main()
{
    srand(time(NULL));                  /* The goal of this main function is to avoid using printf, hence the obscurity */

    int x;
    x = randomArrayAmt();

    int * ptr;
    ptr = sizeUp(x);

    intro(ptr, x);

    stats(ptr, x);

    ascSort(ptr, x);

    showSort(ptr, x);

    medianArray(ptr, x);

    return 0;
}

void intro(int a[], int n)              /* Title parts */
{
    printf("%s - %s\n", stuName, projName);
    printf("Sample Size = %d\n", n);
    printf("Array elements:\n");
    printNum(a, n);
}

int randomArrayAmt(void)                /* Generates a random array count within a range */
{
    int n;
    n = (rand() % (UPPER_LIMIT - LOWER_LIMIT + 1)) + LOWER_LIMIT;

    return n;
}

void randomNumGen(int a[], int n)       /* Generates a random number within a range */
{
    int i;
    for (i = 0; i < n; i++)
        a[i] = rand() % (DATA_UPPER_LIMIT - DATA_LOWER_LIMIT + 1) + DATA_LOWER_LIMIT;
}

int * sizeUp(int n)                     /* Dynamic memory allocation to convert randomNumGen(a, n) into an array */
{
    int * b;
    b = malloc(n * sizeof(int));

    randomNumGen(b, n);

    return b;
}

void printNum(const int a[], int n)     /* Iterates through array and prints value */
{
    int i;
    for (i = 0; i < n; i++)
        printf("%d ", a[i]);
}

void stats(int a[], int n)              /* Print stats */
{
    printf("\nMaximum = %d,", maxArray(a, n));
    printf("\tMinimum = %d", minArray(a, n));
    printf("\nAverage = %d\n", aveArray(a, n));
}

void ascSort(int a[], int n)            /* Swap and loop until sorted */
{
    int i; int temp; int sorted;

    while(1)
    {
        sorted = 0;

        for (i = 0; i < n; i++)
            if (a[i] > a[i + 1])
            {
                temp = a[i];
                a[i] = a[i + 1];
                a[i + 1] = temp;

                sorted = 1;
            }
        if (sorted == 0)
            break;
    }
}

void showSort(int a[], int n)           /* Print sorted list */
{
    printf("Sorted list:\n");
    printNum(a, n);
}

int minArray(int a[], int n)            /* Checking for min */
{
	int min = a[0]; int i;
	for(i = 1; i < n; i++)
		if(a[i] < min)
			min = a[i];
	return min;
}

int maxArray(int a[], int n)            /* Checking for max */
{
	int max = a[0]; int i;
	for(i = 1; i < n; i++)
		if(a[i] > max)
			max = a[i];
	return max;
}

int aveArray(int a[], int n)            /* Checking average */
{
//    int average;
//    average = sumArray(a, n);
//    average /= n;
    return sumArray(a, n) / n;
}

int sumArray(int a[], int n)            /* Getting sum to check average */
{
	int sum = 0;
	int i;

    for (i = 0; i < n; i++)
        sum += a[i];

//    sum = sum / n;

	return sum;
}

int medianArray(int a[], int n)         /* Solve for median based on even or odd count */
{
    if (n % 2 != 0)
    {
        n = n / 2;
        printf("\nMedian = %d", a[n]);
    }
    else
    {
        n = n / 2;
        printf("\nMedian = %d", (a[n] + a[n - 1]) / 2);
    }
}
